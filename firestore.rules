rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isStudent() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/students/$(request.auth.uid));
    }

    // Users collection - for initial user profile creation
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (request.auth.uid == userId || request.auth.token.admin == true);
    }
    
    // Admin collection rules
    match /admins/{adminId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == adminId;  // Allow admin creation during signup
      allow update: if request.auth.uid == adminId || isAdmin();
      allow delete: if isAdmin();
    }

    // Students collection rules
    match /students/{studentId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == studentId;  // Allow student creation during signup
      allow update: if request.auth.uid == studentId || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Jobs collection rules
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Applications collection rules
    match /applications/{applicationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId || isAdmin()
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.studentId == request.auth.uid;
      
      allow update: if isAdmin() || 
        (request.auth.uid == resource.data.studentId && 
         request.resource.data.studentId == resource.data.studentId);
      
      allow delete: if isAdmin();
    }

    // Announcements collection rules
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'content', 'timestamp', 'createdBy', 'createdByName', 'priority', 'isActive']) &&
        request.resource.data.title is string &&
        request.resource.data.content is string &&
        request.resource.data.timestamp is number &&
        request.resource.data.createdBy is string &&
        request.resource.data.createdByName is string &&
        request.resource.data.priority in ['normal', 'high', 'urgent'] &&
        request.resource.data.isActive is bool;
      
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'content', 'timestamp', 'createdBy', 'createdByName', 'priority', 'isActive']) &&
        request.resource.data.title is string &&
        request.resource.data.content is string &&
        request.resource.data.timestamp is number &&
        request.resource.data.createdBy is string &&
        request.resource.data.createdByName is string &&
        request.resource.data.priority in ['normal', 'high', 'urgent'] &&
        request.resource.data.isActive is bool;
      
      allow delete: if isAdmin();
    }

    // Campus Recruitments collection rules
    match /campus_recruitments/{recruitmentId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Campus Recruitment Applications collection rules
    match /campus_recruitment_applications/{applicationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.studentId || isAdmin()
      );
      
      allow create: if isStudent() && 
        request.auth.uid == request.resource.data.studentId &&
        exists(/databases/$(database)/documents/campus_recruitments/$(request.resource.data.recruitmentId));
      
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /notifications/{notificationId} {
      allow create: if request.auth != null;
      allow read, delete: if request.auth != null && 
        (request.auth.token.admin == true || 
         resource.data.to == request.auth.token.fcmToken);
    }
  }
} 